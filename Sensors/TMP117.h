/*
 * TMP117.h
 *
 *  Created on: Oct 14, 2022
 *      Author: mblack
 */

#ifndef TMP117_H_
#define TMP117_H_

/* POSIX Header files */
#include <pthread.h>

/* RTOS header files */
#include <ti/sysbios/BIOS.h>

/* Drivers */
#include <ti/drivers/I2C.h>
#include <ti/sysbios/knl/Semaphore.h>
#include <ti/drivers/Board.h> //Sleep header
#include <string.h>

/* Temperature result registers */
#define TMP117_RESULT_REG       0x00
#define TMP117_EUI_REG          0x0F
#define TMP117_TMPOFFSET_REG    0x07
#define TMP117_MEMUNLOCK_RED    0x04
#define TMP117_MEM1_REG         0x05
#define TMP117_MEM2_REG         0x06
#define TMP117_MEM3_REG         0x08

/* I2C slave addresses */
#define TMP117_ADDR             0x48


typedef enum TMP_Request {
    TMP_None,
    TMP_Initializing,
    TMP_Detect,
    TMP_ReadTemp,
    TMP_ReadSN,
    TMP_WriteSN,
    TMP_ReadID,
    TMP_ReadCal,
    TMP_WriteCal,
    TMP_Stop
} TMP_Request;

typedef enum TMP_Status {
    TMP_Ready,
    TMP_Busy
} TMP_Status;

typedef struct TMP_Misc {
    uint8_t count;
    float *avgTemp;
    uint16_t *readID;
    uint32_t writeSerialNo;
    uint32_t *readSerialNo;
    float writeOffset;
    float *readOffset;
    bool *detect;
    char txBuffer[10];
    char rxBuffer[10];
} TMP_Misc;

typedef struct TMP_Handle {
    const char          tmp_name[10];
    pthread_t           pth_handle;     // Thread Handle Generated by Open_TMP
    I2C_Handle          i2c_handle;     // I2C Handle Generated by Open_TMP
    I2C_Transaction     i2c_trans;      // I2C Transaction
    uint8_t             address;        // Temperature Sensor I2C Address
    Semaphore_Handle    sem_handle;     // Semaphore Handle Generated by Open_TMP
    TMP_Status          tmp_status;     // Updated with current status by thread
    TMP_Request         tmp_request;    // Updated with object methods
    void (*Detect)(struct TMP_Handle*, bool*);    // Method to detect if the TMP117 is found
    void (*ReadTemp)(struct TMP_Handle*,float*,uint8_t);  // Method to read temperature n times
    void (*ReadSN)(struct TMP_Handle*,uint32_t*); // Method to read TMP serial number
    void (*WriteSN)(struct TMP_Handle*,uint32_t); // Method to write TMP serial number
    void (*ReadID)(struct TMP_Handle*,uint16_t*); // Method to read manufacturer TMP ID
    void (*ReadCal)(struct TMP_Handle*,float*);   // Method to read calibration offset
    void (*WriteCal)(struct TMP_Handle*,float);   // Method to write calibration offset
    void (*Stop)(struct TMP_Handle*);             // Method to stop all operations in progress
    TMP_Misc            fxn_details;    // Internal register to manage tasks
} TMP_Handle;


/*
 * Data structure containing currently supported I2C TMP sensors.
 * Sensors are ordered by descending preference.
 */
static const struct
{
    uint8_t resultReg;
    uint8_t EuiReg;
    uint8_t TempOffsetReg;
    uint8_t MemUnlockReg;
    uint8_t Mem1Reg;
    uint8_t Mem2Reg;
    uint8_t Mem3Reg;
} sensor = {TMP117_RESULT_REG,
            TMP117_EUI_REG,
            TMP117_TMPOFFSET_REG,
            TMP117_MEMUNLOCK_RED,
            TMP117_MEM1_REG,
            TMP117_MEM2_REG,
            TMP117_MEM3_REG};

TMP_Handle Open_TMP(I2C_Handle i2c_handle, uint8_t address, const char TMP_Name[10]);

#endif /* TMP117_H_ */
